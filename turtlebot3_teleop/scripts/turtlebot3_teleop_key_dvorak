#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy

from geometry_msgs.msg import Twist

import sys, select, termios, tty

msg = """
Control Your Turtlebot3!
---------------------------
Moving around:
        ,
   a    o    e
        q

,/q : increase/decrease linear velocity
a/e : increase/decrease angular velocity
f: super speed (but not necessarily a good velocity)
space key, o : force stop

CTRL-C to quit
"""

deccel_curve_siso = [0.007378, 0.032657, 0.056174, 0.077887, 0.097841, 0.115997, 0.132390, 0.147011, 0.159852, 0.170909, 0.180193, 0.187693, 0.193420, 0.197368, 0.199539, 0.22]
accel_curve_siso = [0.000069, 0.001454, 0.004617, 0.009564, 0.016279, 0.024770, 0.035056, 0.047110, 0.060930, 0.076549, 0.093918, 0.113093, 0.134045, 0.156743, 0.181236, 0.22]

DECCEL_CURVE_TAIL = len(deccel_curve_siso) - 1
ACCEL_CURVE_TAIL = len(accel_curve_siso) - 1

accel_index = 0
deccel_index = DECCEL_CURVE_TAIL

def speedUp():
    global accel_index
    global deccel_index
    speed = accel_curve_siso[accel_index]
    accel_index = accel_index + 1
    if accel_index > ACCEL_CURVE_TAIL:
        accel_index = ACCEL_CURVE_TAIL

    deccel_index = DECCEL_CURVE_TAIL - accel_index;
    return speed

def speedDown():
    global accel_index
    global deccel_index
    speed = 0.2 - deccel_curve_siso[deccel_index]
    deccel_index = deccel_index + 1
    if deccel_index > DECCEL_CURVE_TAIL:
        print "Brake MAXXED!"
        deccel_index = DECCEL_CURVE_TAIL
    accel_index = ACCEL_CURVE_TAIL - deccel_index;
    return speed
    
def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=5)

    status = 0
    target_linear_vel = 0
    target_angular_vel = 0
    control_linear_vel = 0
    control_angular_vel = 0
    try:
        print msg
        while(1):
            key = getKey()
            if key == ',' :
                if target_linear_vel >= 0:
                    target_linear_vel = speedUp()
                else:
                    target_linear_vel = -speedDown()
                status = status + 1
                print vels(target_linear_vel,target_angular_vel)
            elif key == 'q' :
                if target_linear_vel > 0:
                    target_linear_vel = speedDown()
                else:
                    target_linear_vel = -speedUp()
                status = status + 1
                print vels(target_linear_vel,target_angular_vel)
            elif key == 'a' :
                target_angular_vel = target_angular_vel + 0.1
                status = status + 1
                print vels(target_linear_vel,target_angular_vel)
            elif key == 'f' :
                target_linear_vel = accel_curve_siso[-1]
                status = status + 1
                print vels(target_linear_vel,target_angular_vel)
            elif key == 'e' :
                target_angular_vel = target_angular_vel - 0.1
                status = status + 1
                print vels(target_linear_vel,target_angular_vel)
            elif key == ' ' or key == 'o' :
                target_linear_vel   = 0
                control_linear_vel  = 0
                target_angular_vel  = 0
                control_angular_vel = 0
                accel_index = 0
                deccel_index = 0
                print vels(0, 0)
            elif status == 14 :
                print msg
                status = 0
            else:
                if (key == '\x03'):
                    break

            if target_linear_vel > control_linear_vel:
                control_linear_vel = min( target_linear_vel, control_linear_vel + (0.01/4.0) )
            else:
                control_linear_vel = target_linear_vel

            if target_angular_vel > control_angular_vel:
                control_angular_vel = min( target_angular_vel, control_angular_vel + (0.1/4.0) )
            else:
                control_angular_vel = target_angular_vel

            twist = Twist()
            twist.linear.x = control_linear_vel; twist.linear.y = 0; twist.linear.z = 0
            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = control_angular_vel
            pub.publish(twist)

    except Exception as e:
        print e

    finally:
        twist = Twist()
        twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
        pub.publish(twist)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
